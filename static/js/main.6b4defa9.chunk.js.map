{"version":3,"sources":["App.js","reportWebVitals.js","components/Timer.js","index.js"],"names":["App","useState","mounted","setMounted","renderCount","useEffect","console","log","className","defaultProps","counter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Timer","props","time","setTime","isOn","setIsOn","step","autostart","timerKey","key","i","ms","chunk","toFixed","Promise","resolve","setTimeout","chunks","document","getElementById","style","width","setButtonText","querySelector","innerText","onTimeEnd","buttonText","Date","toISOString","slice","onClick","text","id","ReactDOM","render","StrictMode"],"mappings":"gMA8JA,SAASA,IAAO,IAAD,EAEiBC,oBAAS,GAF1B,mBAENC,EAFM,KAEGC,EAFH,KAGPC,EAAeF,EAAc,EAAJ,EAW/B,OATAG,qBAAU,WAER,OADAF,GAAW,GACJ,eAGN,IAGHG,QAAQC,IAAR,UAAeH,EAAf,YAEE,qBAAKI,UAAU,MAAf,SACE,qDAONR,EAAIS,aAAe,CACjBC,QAAS,GCtLX,IAYeC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OC8DCQ,MAlEf,SAAeC,GAAQ,IAAD,EAEMpB,mBAASoB,EAAMC,MAFrB,mBAEXA,EAFW,KAELC,EAFK,OAGMtB,oBAAS,GAHf,mBAGXuB,EAHW,KAGLC,EAHK,OAIMxB,mBAASoB,EAAMK,MAJrB,mBAIXA,EAJW,aAKgBzB,mBAASoB,EAAMM,YAL/B,mBAKXA,EALW,aAMI1B,mBAASoB,EAAMO,WANnB,mBAMXC,EANW,UAclBxB,qBAAU,WACN,IADa,IAAD,WACHyB,GACL,IAROC,EAQHC,GAAS,KAAOX,EAAMC,MAAMW,QAAQ,IARjCF,EASDL,EARH,IAAIQ,SAAQ,SAACC,GAChBC,WAAWD,EAASJ,OAQfjB,MAAK,WACF,GAAIU,EAAM,CACND,EAAQD,EAAOI,EAAO,KACtB,IAAIW,GAAUf,EAAOI,EAAO,KAAQM,EACpCM,SAASC,eAAeV,GAAKW,MAAMC,MAAnC,UAA8CJ,EAA9C,MACIf,GAAQI,EAAO,MACfY,SAASC,eAAeV,GAAKW,MAAMC,MAAQ,MAC3ChB,GAAQ,GACRiB,EAAc,SACdJ,SAASK,cAAT,sBAAsCd,IAAOe,UAAYvB,EAAMwB,kBAZ1Ef,EAAIR,EAAMQ,EAAI,EAAGA,IAAM,MAiBjC,CAACR,EAAME,IAEVnB,qBAAU,WACFsB,IACAe,EAAc,QACdjB,GAAQ,MAEb,IAvCe,IAyCHM,EAzCG,EA6CkB9B,mBAAS,SA7C3B,mBA6CX6C,EA7CW,KA6CCJ,EA7CD,KAwDlB,OACI,sBAAKlC,UAAU,MAAf,UACI,8BAjBOuB,EAiBW,IAAPT,EAhBR,IAAIyB,KAAKhB,GAAIiB,cAAcC,MAAM,IAAK,MAiBzC,mBAAGzC,UAAW,cAAgBqB,IAC9B,wBAAQqB,QAAS,WAdN,IAACC,EACH,WADGA,EAcsBL,IAZlCrB,GAAQ,GACRiB,EAAc,SACE,SAATS,IACP1B,GAAQ,GACRiB,EAAc,WAQd,SAAgDI,IAChD,qBAAKtC,UAAU,YAAY4C,GAAIvB,QCxD3CwB,IAASC,OACP,eAAC,IAAMC,WAAP,WACE,cAAC,EAAD,CAAOjC,KAAM,EAAGK,WAAW,EAAOD,KAAM,IAAME,SAAU,EAAGiB,UAAW,iBAAM,8DAC5E,cAAC,EAAD,CAAOvB,KAAM,IAAKK,WAAW,EAAMD,KAAM,IAAME,SAAU,EAAGiB,UAAW,iBAAM,iEAE/EP,SAASC,eAAe,SAM1B5B,K","file":"static/js/main.6b4defa9.chunk.js","sourcesContent":["import './App.css';\nimport react, { Component, useEffect, useState } from \"react\";\nimport contactsList from './contacts.js';\n\n// export default class App extends Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       mounted: false,\n//     }\n//   }\n\n//   componentDidMount() {\n//     console.log('didMount');\n//     this.setState({ mounted: true });\n//   }\n\n//   static getDerivedStateFromProps() {\n//   }\n\n//   componentDidUpdate(prevProps, prevState, snapshot) {\n//     console.log('didUpdate', prevState, this.state);\n//   }\n\n//   render() {\n//     const { mounted } = this.state;\n//     const renderCount = !mounted ? 1 : 2;\n//     console.log(`${renderCount} render`);\n//     return (\n//       <div className=\"App\">\n//         <h1>I'm App Component</h1>\n//       </div>\n//     );\n//   }\n// }\n\n// второй пример\n// export default class App extends Component {\n//   state = {\n//     inputValue: '',\n//     contacts: contactsList,\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log(this.state);\n//     const { inputValue } = this.state;\n//     if (inputValue !== prevState.inputValue) {\n//       this.setState({\n//         contacts: contactsList.filter(({ firstName, lastName }) =>\n//           firstName.toLowerCase().includes(inputValue) ||\n//           lastName.toLowerCase().includes(inputValue))\n//       })\n//     }\n//   }\n\n\n//   render() {\n//     const {\n//       inputValue,\n//       contacts,\n//     } = this.state;\n\n//     return (\n//       <div className=\"App\">\n//         <form>\n//           <input\n//             type=\"text\"\n//             value={inputValue}\n//             placeholder=\"search for contacts\"\n//             onChange={(e) => this.setState({ inputValue: e.target.value.trim() })}\n//           />\n//         </form>\n//         <ul>\n//           {contacts.map(({ firstName, lastName }) =>\n//             <li>{`${firstName} ${lastName}`}</li>)\n//           }\n//         </ul>\n//       </div>\n//     );\n//   }\n// }\n\n\n\n\n\n\n// третий пример\n\n// через 1 секунду вернет нам масив с контактами\n// const loadContracts = () => new Promise(resolve => setTimeout(() => resolve(contactsList), 1000));\n\n\n// export default class App extends Component {\n//   state = {\n//     inputValue: '',\n//     contacts: [],\n//   }\n\n//   async componentDidMount() {\n//     const contacts = await loadContracts();\n//     this.setState({\n//       contacts\n//     });\n//   }\n\n\n// // как альтернативный способ\n// // componentDidMount() {\n// //   loadContracts().then((contacts) => this.setState({contacts}));\n// // }\n\n\n//   componentDidUpdate(prevProps, prevState) {\n//     console.log(this.state);\n//     const { inputValue } = this.state;\n//     if (inputValue !== prevState.inputValue) {\n//       this.setState({\n//         contacts: contactsList.filter(({ firstName, lastName }) =>\n//           firstName.toLowerCase().includes(inputValue) ||\n//           lastName.toLowerCase().includes(inputValue))\n//       })\n//     }\n//   }\n\n\n//   render() {\n//     const {\n//       inputValue,\n//       contacts,\n//     } = this.state;\n\n//     return (\n//       <div className=\"App\">\n//         <form>\n//           <input\n//             type=\"text\"\n//             value={inputValue}\n//             placeholder=\"search for contacts\"\n//             onChange={(e) => this.setState({ inputValue: e.target.value.trim() })}\n//           />\n//         </form>\n//         <ul>\n//           {!contacts.length ?\n//             <div>Loading ...</div> :\n//             contacts.map(({ firstName, lastName }) =>\n//             <li>{`${firstName} ${lastName}`}</li>)\n//           }\n//         </ul>\n//       </div>\n//     );\n//   }\n// }\n\n\n\n\nfunction App() {\n\n  const [mounted, setMounted] = useState(false);\n  const renderCount = !mounted ? 1 : 2;\n\n  useEffect(() => {\n    setMounted(true);\n    return () => {\n\n    }\n  }, []);\n\n\n  console.log(`${renderCount} render`);\n  return (\n    <div className=\"App\">\n      <h1>I am component...</h1>\n    </div>\n  )\n}\n\nexport default App;\n\nApp.defaultProps = {\n  counter: 0,\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState, useEffect } from 'react';\r\nimport '../App.css';\r\n\r\nfunction Timer(props) {\r\n\r\n    const [time, setTime] = useState(props.time);\r\n    const [isOn, setIsOn] = useState(false);\r\n    const [step, setStep] = useState(props.step);\r\n    const [autostart, setAutostart] = useState(props.autostart);\r\n    const [key, setKey] = useState(props.timerKey);\r\n\r\n    function delay(ms) {\r\n        return new Promise((resolve) => {\r\n            setTimeout(resolve, ms);\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        for (let i = time; i > 0; i--) {\r\n            let chunk = (1540 / props.time).toFixed(2);\r\n            delay(step)\r\n                .then(() => {\r\n                    if (isOn) {\r\n                        setTime(time - step / 1000);\r\n                        let chunks = (time - step / 1000) * chunk;\r\n                        document.getElementById(key).style.width = `${chunks}px`;\r\n                        if (time <= step / 1000) {\r\n                            document.getElementById(key).style.width = \"0px\";\r\n                            setIsOn(false);\r\n                            setButtonText(\"Start\");\r\n                            document.querySelector(`.timerIsEnd-${key}`).innerText = props.onTimeEnd();\r\n                        }\r\n                    }\r\n                })\r\n        }\r\n    }, [time, isOn]);\r\n\r\n    useEffect(() => {\r\n        if (autostart) {\r\n            setButtonText(\"Stop\");\r\n            setIsOn(true);\r\n        }\r\n    }, []);\r\n\r\n    function time1(ms) {\r\n        return new Date(ms).toISOString().slice(11, -5);\r\n    }\r\n\r\n    const [buttonText, setButtonText] = useState(\"Start\");\r\n    const changeText = (text) => {\r\n        if (text === \"Start\") {\r\n            setIsOn(true);\r\n            setButtonText(\"Stop\");\r\n        } else if (text === \"Stop\") {\r\n            setIsOn(false);\r\n            setButtonText(\"Start\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <h2>{time1(time * 1000)}</h2>\r\n            <p className={'timerIsEnd-' + key}></p>\r\n            <button onClick={() => changeText(buttonText)}>{buttonText}</button>\r\n            <div className=\"rectangle\" id={key}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport AppHook from './AppHook';\nimport Timer from './components/Timer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer time={5} autostart={false} step={1000} timerKey={1} onTimeEnd={() => \"Час вийшов!\"} />\n    <Timer time={123} autostart={true} step={2000} timerKey={2} onTimeEnd={() => \"Час вийшов!\"} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}